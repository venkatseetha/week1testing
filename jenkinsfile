pipeline {
    agent any
    
    environment {
        REPO_URL = 'https://github.com/your/repo.git'  // Your repository URL
        BRANCH_AGE_DAYS = 180  // Set to 30 for 30 days, 180 for 6 months
    }
    
    stages {
        stage('Clone Repository') {
            steps {
                // Clone the repository
                git url: "${env.REPO_URL}", credentialsId: 'your-credentials-id'
            }
        }
        
        stage('Delete Old Branches') {
            steps {
                script {
                    // Fetch all branches
                    sh 'git fetch --all'

                    // Get the current date in Unix timestamp
                    def currentDate = new Date().getTime()

                    // Get the list of branches
                    def branches = sh(script: 'git for-each-ref --format="%(refname:short) %(committerdate:unix)" refs/remotes/origin', returnStdout: true).trim().split('\n')

                    for (branch in branches) {
                        def parts = branch.split(' ')
                        def branchName = parts[0].replaceAll('^origin/', '')
                        def lastCommitDate = parts[1].toLong() * 1000

                        // Calculate branch age in days
                        def branchAgeDays = (currentDate - lastCommitDate) / (1000 * 60 * 60 * 24)

                        if (branchAgeDays > env.BRANCH_AGE_DAYS.toInteger() && branchName != 'main' && branchName != 'master') {
                            // Delete the branch if it is older than the specified age and not the main/master branch
                            sh "git push origin --delete ${branchName}"
                            echo "Deleted branch: ${branchName} (Age: ${branchAgeDays} days)"
                        } else {
                            echo "Skipping branch: ${branchName} (Age: ${branchAgeDays} days)"
                        }
                    }
                }
            }
        }
    }
    
    post {
        cleanup {
            // Clean up the workspace after the build
            deleteDir()
        }
    }
}

--------------------------------------------------------------------------------------------------------------------------------------------------------

name: Deploy Java Application

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to deploy'
        required: true
        default: 'main'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        ref: ${{ github.event.inputs.branch }}

    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        distribution: 'adopt'
        java-version: '11'

    - name: Build with Maven
      run: mvn clean install

    - name: SonarQube Scan
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: mvn sonar:sonar -Dsonar.projectKey=your-project-key -Dsonar.host.url=https://your-sonarqube-server -Dsonar.login=${{ secrets.SONAR_TOKEN }}

    - name: Wait for SonarQube Quality Gate
      id: sonar
      uses: sonarsource/sonarqube-quality-gate-action@v2
      with:
        host-url: https://your-sonarqube-server
        project-key: your-project-key
        auth-token: ${{ secrets.SONAR_TOKEN }}

    - name: Deploy application
      if: steps.sonar.outputs.status == 'passed'
      run: |
        echo "Deploying the application..."
        # Add your deployment commands here
-------------------------------------------------------------------------------------------------------------------------------------------------------

pipeline {
    agent any
    parameters {
        string(name: 'BRANCH_NAME', defaultValue: 'main', description: 'Branch to deploy')
    }
    environment {
        GITHUB_CREDENTIALS = credentials('GITHUB_TOKEN')
        SONARQUBE_SERVER_URL = 'https://your-sonarqube-server'
        SONARQUBE_CREDENTIALS = credentials('SONARQUBE_TOKEN')
    }
    stages {
        stage('Clone Repository') {
            steps {
                script {
                    checkout([$class: 'GitSCM', branches: [[name: "*/${params.BRANCH_NAME}"]], userRemoteConfigs: [[url: 'https://github.com/your-repo.git', credentialsId: 'GITHUB_CREDENTIALS']]])
                }
            }
        }
        stage('Build') {
            steps {
                script {
                    sh 'mvn clean install'
                }
            }
        }
        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('SonarQube') {
                    sh 'mvn sonar:sonar'
                }
            }
        }
        stage('Quality Gate') {
            steps {
                script {
                    timeout(time: 1, unit: 'MINUTES') {
                        waitForQualityGate abortPipeline: true
                    }
                }
            }
        }
        stage('Deploy') {
            when {
                expression { currentBuild.result == null || currentBuild.result == 'SUCCESS' }
            }
            steps {
                script {
                    sh '''
                    echo "Deploying the application..."
                    # Add your deployment commands here
                    '''
                }
            }
        }
    }
}

